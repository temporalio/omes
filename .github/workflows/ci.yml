name: Continuous Integration

env:
  MISE_VERSION: v2025.8.1

on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          format: gcc
          severity: error

  test-omes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Run tests
        run: |
          go test -race ./...

  lint-worker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [go, java, python, typescript, dotnet]
        include:
          - sdk: go
            install: ./scripts/install-go.sh
            lint: ./scripts/lint-go-worker.sh
            submodules: false
          - sdk: java
            install: ./scripts/install-java.sh && ./scripts/install-go.sh
            lint: ./scripts/lint-java-worker.sh
            submodules: false
          - sdk: python
            install: ./scripts/install-python.sh && ./scripts/install-go.sh
            lint: ./scripts/lint-python-worker.sh
            submodules: false
          - sdk: typescript
            install: ./scripts/install-node.sh && ./scripts/install-go.sh
            lint: ./scripts/lint-typescript-worker.sh
            submodules: true
          - sdk: dotnet
            install: ./scripts/install-dotnet.sh && ./scripts/install-go.sh
            lint: ./scripts/lint-dotnet-worker.sh
            submodules: true
    steps:
      - name: Print build information
        run: "echo head_ref: ${{ github.head_ref }}, ref: ${{ github.ref }}"
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: ${{ matrix.submodules }}
      - name: Install mise
        uses: jdx/mise-action@v2.4.4
        with:
          version: ${{ env.MISE_VERSION }}
      - name: Install Tools
        run: ${{ matrix.install }}
      - name: Lint ${{ matrix.sdk }}
        run: ${{ matrix.lint }}
      - name: Check formatting
        run: |
          git diff --exit-code || (echo "${{ matrix.sdk }} worker has uncommitted formatting changes after linting" && exit 1)

  build-worker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [go, java, python, typescript, dotnet]
        include:
          - sdk: go
            install: ./scripts/install-go.sh
            build: ./scripts/build-go-worker.sh
            submodules: false
          - sdk: java
            install: ./scripts/install-java.sh && ./scripts/install-go.sh
            build: ./scripts/build-java-worker.sh
            submodules: false
          - sdk: python
            install: ./scripts/install-python.sh && ./scripts/install-go.sh
            build: ./scripts/build-python-worker.sh
            submodules: false
          - sdk: typescript
            install: ./scripts/install-node.sh && ./scripts/install-go.sh
            build: ./scripts/build-typescript-worker.sh
            submodules: true
          - sdk: dotnet
            install: ./scripts/install-dotnet.sh && ./scripts/install-go.sh
            build: ./scripts/build-dotnet-worker.sh
            submodules: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: ${{ matrix.submodules }}
      - name: Install mise
        uses: jdx/mise-action@v2.4.4
        with:
          version: ${{ env.MISE_VERSION }}
      - name: Install Tools
        run: ${{ matrix.install }}
      - name: Build ${{ matrix.sdk }} worker
        run: ${{ matrix.build }}

  test-kitchensink:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [go, java, python, typescript, dotnet]
        include:
          - sdk: go
            install: ./scripts/install-go.sh
            submodules: false
          - sdk: java
            install: ./scripts/install-java.sh && ./scripts/install-go.sh
            submodules: false
          - sdk: python
            install: ./scripts/install-python.sh && ./scripts/install-go.sh
            submodules: false
          - sdk: typescript
            install: ./scripts/install-node.sh && ./scripts/install-go.sh
            submodules: true
          - sdk: dotnet
            install: ./scripts/install-dotnet.sh && ./scripts/install-go.sh
            submodules: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: ${{ matrix.submodules }}
      - name: Install mise
        uses: jdx/mise-action@v2.4.4
        with:
          version: ${{ env.MISE_VERSION }}
      - name: Install Tools
        run: ${{ matrix.install }}
      - name: Test Kitchensink ${{ matrix.sdk }}
        run: |
          SDK=${{ matrix.sdk }} go test -race ./loadgen -run TestKitchenSink -v

  build-ks-gen-and-ensure-protos-up-to-date:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Install mise
        uses: jdx/mise-action@v2.4.4
        with:
          version: ${{ env.MISE_VERSION }}
      - name: Install Tools
        run: |
          ./scripts/install-rust.sh
          ./scripts/install-go.sh
          ./scripts/install-protoc.sh
          ./scripts/install-node.sh
      - name: Build proto
        run: |
          ./scripts/build-kitchensink.sh
      - name: Check diff
        run: |
          git config --global core.safecrlf false
          git diff > generator.diff
          git diff --exit-code
      - name: Upload generator diff
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: generator-diff
          path: generator.diff
          if-no-files-found: ignore

  # env cannot be referenced in jobs.<job_id>.with.<with_id>, so we need a job to run before
  # to append a "v" to the version string
  prepare-for-docker-push:
    runs-on: ubuntu-latest
    outputs:
      go-sdk-version: ${{ steps.set-output.outputs.go-sdk-version }}
      ts-sdk-version: ${{ steps.set-output.outputs.ts-sdk-version }}
      java-sdk-version: ${{ steps.set-output.outputs.java-sdk-version }}
      python-sdk-version: ${{ steps.set-output.outputs.python-sdk-version }}
      dotnet-sdk-version: ${{ steps.set-output.outputs.dotnet-sdk-version }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Load versions
      run: |
        set -a && source versions.env && set +a
        printenv >> $GITHUB_ENV
    - name: Set output variables to pass to docker YML
      id: set-output
      run: |
        echo "go-sdk-version=v${{ env.GO_SDK_VERSION }}" >> "$GITHUB_OUTPUT"
        echo "ts-sdk-version=v${{ env.TYPESCRIPT_SDK_VERSION }}" >> "$GITHUB_OUTPUT"
        echo "java-sdk-version=v${{ env.JAVA_SDK_VERSION }}" >> "$GITHUB_OUTPUT"
        echo "python-sdk-version=v${{ env.PYTHON_SDK_VERSION }}" >> "$GITHUB_OUTPUT"
        echo "dotnet-sdk-version=v${{ env.DOTNET_SDK_VERSION }}" >> "$GITHUB_OUTPUT"
  push-latest-docker-images:
    needs: prepare-for-docker-push
    uses: ./.github/workflows/all-docker-images.yml
    secrets: inherit
    with:
      # Only images that are built from `main` are tagged as `latest`.
      # This ensures that internal systems can rely on the latest tag to be stable.
      as-latest: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      do-push: true
      go-version: ${{ needs.prepare-for-docker-push.outputs.go-sdk-version }}
      ts-version: ${{ needs.prepare-for-docker-push.outputs.ts-sdk-version }}
      java-version: ${{ needs.prepare-for-docker-push.outputs.java-sdk-version }}
      py-version: ${{ needs.prepare-for-docker-push.outputs.python-sdk-version }}
      dotnet-version: ${{ needs.prepare-for-docker-push.outputs.dotnet-sdk-version }}
