// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: kitchen_sink.proto

package kitchensink

import (
	v1 "go.temporal.io/api/common/v1"
	v11 "go.temporal.io/api/enums/v1"
	v12 "go.temporal.io/api/failure/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used by the service to determine the fate of a child workflow
// in case its parent is closed.
type ParentClosePolicy int32

const (
	// Let's the server set the default.
	ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// Terminate means terminating the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// Abandon means not doing anything on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancel means requesting cancellation on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

// Enum value maps for ParentClosePolicy.
var (
	ParentClosePolicy_name = map[int32]string{
		0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
		1: "PARENT_CLOSE_POLICY_TERMINATE",
		2: "PARENT_CLOSE_POLICY_ABANDON",
		3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	}
	ParentClosePolicy_value = map[string]int32{
		"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
		"PARENT_CLOSE_POLICY_TERMINATE":      1,
		"PARENT_CLOSE_POLICY_ABANDON":        2,
		"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
	}
)

func (x ParentClosePolicy) Enum() *ParentClosePolicy {
	p := new(ParentClosePolicy)
	*p = x
	return p
}

func (x ParentClosePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentClosePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_kitchen_sink_proto_enumTypes[0].Descriptor()
}

func (ParentClosePolicy) Type() protoreflect.EnumType {
	return &file_kitchen_sink_proto_enumTypes[0]
}

func (x ParentClosePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentClosePolicy.Descriptor instead.
func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{0}
}

// An indication of user's intent concerning what Build ID versioning approach should be used for
// a specific command
type VersioningIntent int32

const (
	// Indicates that core should choose the most sensible default behavior for the type of
	// command, accounting for whether the command will be run on the same task queue as the current
	// worker.
	VersioningIntent_UNSPECIFIED VersioningIntent = 0
	// Indicates that the command should run on a worker with compatible version if possible. It may
	// not be possible if the target task queue does not also have knowledge of the current worker's
	// build ID.
	VersioningIntent_COMPATIBLE VersioningIntent = 1
	// Indicates that the command should run on the target task queue's current overall-default
	// build ID.
	VersioningIntent_DEFAULT VersioningIntent = 2
)

// Enum value maps for VersioningIntent.
var (
	VersioningIntent_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "COMPATIBLE",
		2: "DEFAULT",
	}
	VersioningIntent_value = map[string]int32{
		"UNSPECIFIED": 0,
		"COMPATIBLE":  1,
		"DEFAULT":     2,
	}
)

func (x VersioningIntent) Enum() *VersioningIntent {
	p := new(VersioningIntent)
	*p = x
	return p
}

func (x VersioningIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersioningIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_kitchen_sink_proto_enumTypes[1].Descriptor()
}

func (VersioningIntent) Type() protoreflect.EnumType {
	return &file_kitchen_sink_proto_enumTypes[1]
}

func (x VersioningIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersioningIntent.Descriptor instead.
func (VersioningIntent) EnumDescriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{1}
}

// Controls at which point to report back to lang when a child workflow is cancelled
type ChildWorkflowCancellationType int32

const (
	// Do not request cancellation of the child workflow if already scheduled
	ChildWorkflowCancellationType_CHILD_WF_ABANDON ChildWorkflowCancellationType = 0
	// Initiate a cancellation request and immediately report cancellation to the parent.
	ChildWorkflowCancellationType_CHILD_WF_TRY_CANCEL ChildWorkflowCancellationType = 1
	// Wait for child cancellation completion.
	ChildWorkflowCancellationType_CHILD_WF_WAIT_CANCELLATION_COMPLETED ChildWorkflowCancellationType = 2
	// Request cancellation of the child and wait for confirmation that the request was received.
	ChildWorkflowCancellationType_CHILD_WF_WAIT_CANCELLATION_REQUESTED ChildWorkflowCancellationType = 3
)

// Enum value maps for ChildWorkflowCancellationType.
var (
	ChildWorkflowCancellationType_name = map[int32]string{
		0: "CHILD_WF_ABANDON",
		1: "CHILD_WF_TRY_CANCEL",
		2: "CHILD_WF_WAIT_CANCELLATION_COMPLETED",
		3: "CHILD_WF_WAIT_CANCELLATION_REQUESTED",
	}
	ChildWorkflowCancellationType_value = map[string]int32{
		"CHILD_WF_ABANDON":                     0,
		"CHILD_WF_TRY_CANCEL":                  1,
		"CHILD_WF_WAIT_CANCELLATION_COMPLETED": 2,
		"CHILD_WF_WAIT_CANCELLATION_REQUESTED": 3,
	}
)

func (x ChildWorkflowCancellationType) Enum() *ChildWorkflowCancellationType {
	p := new(ChildWorkflowCancellationType)
	*p = x
	return p
}

func (x ChildWorkflowCancellationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChildWorkflowCancellationType) Descriptor() protoreflect.EnumDescriptor {
	return file_kitchen_sink_proto_enumTypes[2].Descriptor()
}

func (ChildWorkflowCancellationType) Type() protoreflect.EnumType {
	return &file_kitchen_sink_proto_enumTypes[2]
}

func (x ChildWorkflowCancellationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChildWorkflowCancellationType.Descriptor instead.
func (ChildWorkflowCancellationType) EnumDescriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{2}
}

type ActivityCancellationType int32

const (
	// Initiate a cancellation request and immediately report cancellation to the workflow.
	ActivityCancellationType_TRY_CANCEL ActivityCancellationType = 0
	// Wait for activity cancellation completion. Note that activity must heartbeat to receive a
	// cancellation notification. This can block the cancellation for a long time if activity
	// doesn't heartbeat or chooses to ignore the cancellation request.
	ActivityCancellationType_WAIT_CANCELLATION_COMPLETED ActivityCancellationType = 1
	// Do not request cancellation of the activity and immediately report cancellation to the
	// workflow
	ActivityCancellationType_ABANDON ActivityCancellationType = 2
)

// Enum value maps for ActivityCancellationType.
var (
	ActivityCancellationType_name = map[int32]string{
		0: "TRY_CANCEL",
		1: "WAIT_CANCELLATION_COMPLETED",
		2: "ABANDON",
	}
	ActivityCancellationType_value = map[string]int32{
		"TRY_CANCEL":                  0,
		"WAIT_CANCELLATION_COMPLETED": 1,
		"ABANDON":                     2,
	}
)

func (x ActivityCancellationType) Enum() *ActivityCancellationType {
	p := new(ActivityCancellationType)
	*p = x
	return p
}

func (x ActivityCancellationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityCancellationType) Descriptor() protoreflect.EnumDescriptor {
	return file_kitchen_sink_proto_enumTypes[3].Descriptor()
}

func (ActivityCancellationType) Type() protoreflect.EnumType {
	return &file_kitchen_sink_proto_enumTypes[3]
}

func (x ActivityCancellationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityCancellationType.Descriptor instead.
func (ActivityCancellationType) EnumDescriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{3}
}

// The input to the test overall. A copy of this constitutes everything that is needed to reproduce
// the test.
type TestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowInput   *WorkflowInput         `protobuf:"bytes,1,opt,name=workflow_input,json=workflowInput,proto3" json:"workflow_input,omitempty"`
	ClientSequence  *ClientSequence        `protobuf:"bytes,2,opt,name=client_sequence,json=clientSequence,proto3" json:"client_sequence,omitempty"`
	WithStartAction *WithStartClientAction `protobuf:"bytes,3,opt,name=with_start_action,json=withStartAction,proto3" json:"with_start_action,omitempty"`
}

func (x *TestInput) Reset() {
	*x = TestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInput) ProtoMessage() {}

func (x *TestInput) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInput.ProtoReflect.Descriptor instead.
func (*TestInput) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{0}
}

func (x *TestInput) GetWorkflowInput() *WorkflowInput {
	if x != nil {
		return x.WorkflowInput
	}
	return nil
}

func (x *TestInput) GetClientSequence() *ClientSequence {
	if x != nil {
		return x.ClientSequence
	}
	return nil
}

func (x *TestInput) GetWithStartAction() *WithStartClientAction {
	if x != nil {
		return x.WithStartAction
	}
	return nil
}

// All the client actions that will be taken over the course of this test
type ClientSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionSets []*ClientActionSet `protobuf:"bytes,1,rep,name=action_sets,json=actionSets,proto3" json:"action_sets,omitempty"`
}

func (x *ClientSequence) Reset() {
	*x = ClientSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSequence) ProtoMessage() {}

func (x *ClientSequence) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSequence.ProtoReflect.Descriptor instead.
func (*ClientSequence) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{1}
}

func (x *ClientSequence) GetActionSets() []*ClientActionSet {
	if x != nil {
		return x.ActionSets
	}
	return nil
}

// A set of client actions to execute.
type ClientActionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions    []*ClientAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Concurrent bool            `protobuf:"varint,2,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	// Wait the specified amount of time at the end of the action set before proceeding to the next
	// (if there is one, if not, ignored).
	WaitAtEnd *durationpb.Duration `protobuf:"bytes,3,opt,name=wait_at_end,json=waitAtEnd,proto3" json:"wait_at_end,omitempty"`
	// If set, the client should wait for the current run to end before proceeding (IE: the workflow
	// is going to continue-as-new).
	WaitForCurrentRunToFinishAtEnd bool `protobuf:"varint,4,opt,name=wait_for_current_run_to_finish_at_end,json=waitForCurrentRunToFinishAtEnd,proto3" json:"wait_for_current_run_to_finish_at_end,omitempty"`
}

func (x *ClientActionSet) Reset() {
	*x = ClientActionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientActionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientActionSet) ProtoMessage() {}

func (x *ClientActionSet) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientActionSet.ProtoReflect.Descriptor instead.
func (*ClientActionSet) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{2}
}

func (x *ClientActionSet) GetActions() []*ClientAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ClientActionSet) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

func (x *ClientActionSet) GetWaitAtEnd() *durationpb.Duration {
	if x != nil {
		return x.WaitAtEnd
	}
	return nil
}

func (x *ClientActionSet) GetWaitForCurrentRunToFinishAtEnd() bool {
	if x != nil {
		return x.WaitForCurrentRunToFinishAtEnd
	}
	return false
}

type WithStartClientAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*WithStartClientAction_DoSignal
	//	*WithStartClientAction_DoUpdate
	Variant isWithStartClientAction_Variant `protobuf_oneof:"variant"`
}

func (x *WithStartClientAction) Reset() {
	*x = WithStartClientAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithStartClientAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithStartClientAction) ProtoMessage() {}

func (x *WithStartClientAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithStartClientAction.ProtoReflect.Descriptor instead.
func (*WithStartClientAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{3}
}

func (m *WithStartClientAction) GetVariant() isWithStartClientAction_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *WithStartClientAction) GetDoSignal() *DoSignal {
	if x, ok := x.GetVariant().(*WithStartClientAction_DoSignal); ok {
		return x.DoSignal
	}
	return nil
}

func (x *WithStartClientAction) GetDoUpdate() *DoUpdate {
	if x, ok := x.GetVariant().(*WithStartClientAction_DoUpdate); ok {
		return x.DoUpdate
	}
	return nil
}

type isWithStartClientAction_Variant interface {
	isWithStartClientAction_Variant()
}

type WithStartClientAction_DoSignal struct {
	DoSignal *DoSignal `protobuf:"bytes,1,opt,name=do_signal,json=doSignal,proto3,oneof"`
}

type WithStartClientAction_DoUpdate struct {
	DoUpdate *DoUpdate `protobuf:"bytes,2,opt,name=do_update,json=doUpdate,proto3,oneof"`
}

func (*WithStartClientAction_DoSignal) isWithStartClientAction_Variant() {}

func (*WithStartClientAction_DoUpdate) isWithStartClientAction_Variant() {}

type ClientAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*ClientAction_DoSignal
	//	*ClientAction_DoQuery
	//	*ClientAction_DoUpdate
	//	*ClientAction_NestedActions
	Variant isClientAction_Variant `protobuf_oneof:"variant"`
}

func (x *ClientAction) Reset() {
	*x = ClientAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAction) ProtoMessage() {}

func (x *ClientAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAction.ProtoReflect.Descriptor instead.
func (*ClientAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{4}
}

func (m *ClientAction) GetVariant() isClientAction_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *ClientAction) GetDoSignal() *DoSignal {
	if x, ok := x.GetVariant().(*ClientAction_DoSignal); ok {
		return x.DoSignal
	}
	return nil
}

func (x *ClientAction) GetDoQuery() *DoQuery {
	if x, ok := x.GetVariant().(*ClientAction_DoQuery); ok {
		return x.DoQuery
	}
	return nil
}

func (x *ClientAction) GetDoUpdate() *DoUpdate {
	if x, ok := x.GetVariant().(*ClientAction_DoUpdate); ok {
		return x.DoUpdate
	}
	return nil
}

func (x *ClientAction) GetNestedActions() *ClientActionSet {
	if x, ok := x.GetVariant().(*ClientAction_NestedActions); ok {
		return x.NestedActions
	}
	return nil
}

type isClientAction_Variant interface {
	isClientAction_Variant()
}

type ClientAction_DoSignal struct {
	DoSignal *DoSignal `protobuf:"bytes,1,opt,name=do_signal,json=doSignal,proto3,oneof"`
}

type ClientAction_DoQuery struct {
	DoQuery *DoQuery `protobuf:"bytes,2,opt,name=do_query,json=doQuery,proto3,oneof"`
}

type ClientAction_DoUpdate struct {
	DoUpdate *DoUpdate `protobuf:"bytes,3,opt,name=do_update,json=doUpdate,proto3,oneof"`
}

type ClientAction_NestedActions struct {
	NestedActions *ClientActionSet `protobuf:"bytes,4,opt,name=nested_actions,json=nestedActions,proto3,oneof"`
}

func (*ClientAction_DoSignal) isClientAction_Variant() {}

func (*ClientAction_DoQuery) isClientAction_Variant() {}

func (*ClientAction_DoUpdate) isClientAction_Variant() {}

func (*ClientAction_NestedActions) isClientAction_Variant() {}

type DoSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*DoSignal_DoSignalActions_
	//	*DoSignal_Custom
	Variant isDoSignal_Variant `protobuf_oneof:"variant"`
	// If set, the Signal is a Signal-with-Start.
	WithStart bool `protobuf:"varint,3,opt,name=with_start,json=withStart,proto3" json:"with_start,omitempty"`
}

func (x *DoSignal) Reset() {
	*x = DoSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoSignal) ProtoMessage() {}

func (x *DoSignal) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoSignal.ProtoReflect.Descriptor instead.
func (*DoSignal) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{5}
}

func (m *DoSignal) GetVariant() isDoSignal_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *DoSignal) GetDoSignalActions() *DoSignal_DoSignalActions {
	if x, ok := x.GetVariant().(*DoSignal_DoSignalActions_); ok {
		return x.DoSignalActions
	}
	return nil
}

func (x *DoSignal) GetCustom() *HandlerInvocation {
	if x, ok := x.GetVariant().(*DoSignal_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *DoSignal) GetWithStart() bool {
	if x != nil {
		return x.WithStart
	}
	return false
}

type isDoSignal_Variant interface {
	isDoSignal_Variant()
}

type DoSignal_DoSignalActions_ struct {
	// A signal handler must exist named `do_actions_signal` which is responsible for handling the
	// DoSignalActions message. See it's doc for details.
	DoSignalActions *DoSignal_DoSignalActions `protobuf:"bytes,1,opt,name=do_signal_actions,json=doSignalActions,proto3,oneof"`
}

type DoSignal_Custom struct {
	// Send an arbitrary signal
	Custom *HandlerInvocation `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*DoSignal_DoSignalActions_) isDoSignal_Variant() {}

func (*DoSignal_Custom) isDoSignal_Variant() {}

type DoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*DoQuery_ReportState
	//	*DoQuery_Custom
	Variant isDoQuery_Variant `protobuf_oneof:"variant"`
	// If set, the client should expect the query to fail
	FailureExpected bool `protobuf:"varint,10,opt,name=failure_expected,json=failureExpected,proto3" json:"failure_expected,omitempty"`
}

func (x *DoQuery) Reset() {
	*x = DoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoQuery) ProtoMessage() {}

func (x *DoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoQuery.ProtoReflect.Descriptor instead.
func (*DoQuery) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{6}
}

func (m *DoQuery) GetVariant() isDoQuery_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *DoQuery) GetReportState() *v1.Payloads {
	if x, ok := x.GetVariant().(*DoQuery_ReportState); ok {
		return x.ReportState
	}
	return nil
}

func (x *DoQuery) GetCustom() *HandlerInvocation {
	if x, ok := x.GetVariant().(*DoQuery_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *DoQuery) GetFailureExpected() bool {
	if x != nil {
		return x.FailureExpected
	}
	return false
}

type isDoQuery_Variant interface {
	isDoQuery_Variant()
}

type DoQuery_ReportState struct {
	// A query must exist named `report_state` which returns the `WorkflowState` message. The input
	// is pointless and only exists to allow testing of variably-sized query args.
	ReportState *v1.Payloads `protobuf:"bytes,1,opt,name=report_state,json=reportState,proto3,oneof"`
}

type DoQuery_Custom struct {
	// Send an arbitrary query
	Custom *HandlerInvocation `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*DoQuery_ReportState) isDoQuery_Variant() {}

func (*DoQuery_Custom) isDoQuery_Variant() {}

type DoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*DoUpdate_DoActions
	//	*DoUpdate_Custom
	Variant isDoUpdate_Variant `protobuf_oneof:"variant"`
	// If set, the Update is an Update-with-Start.
	WithStart bool `protobuf:"varint,3,opt,name=with_start,json=withStart,proto3" json:"with_start,omitempty"`
	// If set, the client should expect the update to fail
	FailureExpected bool `protobuf:"varint,10,opt,name=failure_expected,json=failureExpected,proto3" json:"failure_expected,omitempty"`
}

func (x *DoUpdate) Reset() {
	*x = DoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoUpdate) ProtoMessage() {}

func (x *DoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoUpdate.ProtoReflect.Descriptor instead.
func (*DoUpdate) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{7}
}

func (m *DoUpdate) GetVariant() isDoUpdate_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *DoUpdate) GetDoActions() *DoActionsUpdate {
	if x, ok := x.GetVariant().(*DoUpdate_DoActions); ok {
		return x.DoActions
	}
	return nil
}

func (x *DoUpdate) GetCustom() *HandlerInvocation {
	if x, ok := x.GetVariant().(*DoUpdate_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *DoUpdate) GetWithStart() bool {
	if x != nil {
		return x.WithStart
	}
	return false
}

func (x *DoUpdate) GetFailureExpected() bool {
	if x != nil {
		return x.FailureExpected
	}
	return false
}

type isDoUpdate_Variant interface {
	isDoUpdate_Variant()
}

type DoUpdate_DoActions struct {
	// An update must exist named `do_actions_update` which handles the `DoActionsUpdate` message.
	// See message doc for what it should do.
	DoActions *DoActionsUpdate `protobuf:"bytes,1,opt,name=do_actions,json=doActions,proto3,oneof"`
}

type DoUpdate_Custom struct {
	// Send an arbitrary update request
	Custom *HandlerInvocation `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*DoUpdate_DoActions) isDoUpdate_Variant() {}

func (*DoUpdate_Custom) isDoUpdate_Variant() {}

type DoActionsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*DoActionsUpdate_DoActions
	//	*DoActionsUpdate_RejectMe
	Variant isDoActionsUpdate_Variant `protobuf_oneof:"variant"`
}

func (x *DoActionsUpdate) Reset() {
	*x = DoActionsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoActionsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoActionsUpdate) ProtoMessage() {}

func (x *DoActionsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoActionsUpdate.ProtoReflect.Descriptor instead.
func (*DoActionsUpdate) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{8}
}

func (m *DoActionsUpdate) GetVariant() isDoActionsUpdate_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *DoActionsUpdate) GetDoActions() *ActionSet {
	if x, ok := x.GetVariant().(*DoActionsUpdate_DoActions); ok {
		return x.DoActions
	}
	return nil
}

func (x *DoActionsUpdate) GetRejectMe() *emptypb.Empty {
	if x, ok := x.GetVariant().(*DoActionsUpdate_RejectMe); ok {
		return x.RejectMe
	}
	return nil
}

type isDoActionsUpdate_Variant interface {
	isDoActionsUpdate_Variant()
}

type DoActionsUpdate_DoActions struct {
	// Do same thing signal handler would do when given the provided action set. The handler should
	// return the `WorkflowState` when done with all the provided actions. You may also include a
	// `ReturnErrorAction` or `ContinueAsNewAction` in the set to exit the handler in those ways.
	DoActions *ActionSet `protobuf:"bytes,1,opt,name=do_actions,json=doActions,proto3,oneof"`
}

type DoActionsUpdate_RejectMe struct {
	// The validator should reject the update
	RejectMe *emptypb.Empty `protobuf:"bytes,2,opt,name=reject_me,json=rejectMe,proto3,oneof"`
}

func (*DoActionsUpdate_DoActions) isDoActionsUpdate_Variant() {}

func (*DoActionsUpdate_RejectMe) isDoActionsUpdate_Variant() {}

type HandlerInvocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args []*v1.Payload `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *HandlerInvocation) Reset() {
	*x = HandlerInvocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerInvocation) ProtoMessage() {}

func (x *HandlerInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerInvocation.ProtoReflect.Descriptor instead.
func (*HandlerInvocation) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{9}
}

func (x *HandlerInvocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HandlerInvocation) GetArgs() []*v1.Payload {
	if x != nil {
		return x.Args
	}
	return nil
}

// Each workflow must maintain an instance of this state
type WorkflowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvs map[string]string `protobuf:"bytes,1,rep,name=kvs,proto3" json:"kvs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowState) Reset() {
	*x = WorkflowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowState) ProtoMessage() {}

func (x *WorkflowState) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowState.ProtoReflect.Descriptor instead.
func (*WorkflowState) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowState) GetKvs() map[string]string {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type WorkflowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialActions []*ActionSet `protobuf:"bytes,1,rep,name=initial_actions,json=initialActions,proto3" json:"initial_actions,omitempty"`
}

func (x *WorkflowInput) Reset() {
	*x = WorkflowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowInput) ProtoMessage() {}

func (x *WorkflowInput) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowInput.ProtoReflect.Descriptor instead.
func (*WorkflowInput) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowInput) GetInitialActions() []*ActionSet {
	if x != nil {
		return x.InitialActions
	}
	return nil
}

// A set of actions to execute concurrently or sequentially. It is necessary to be able to represent
// sequential execution without multiple 1-size action sets, as that implies the receipt of a signal
// between each of those sets, which may not be desired.
//
// All actions are handled before proceeding to the next action set, unless one of those actions
// would cause the workflow to complete/fail/CAN.
type ActionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions    []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Concurrent bool      `protobuf:"varint,2,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
}

func (x *ActionSet) Reset() {
	*x = ActionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSet) ProtoMessage() {}

func (x *ActionSet) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSet.ProtoReflect.Descriptor instead.
func (*ActionSet) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{12}
}

func (x *ActionSet) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ActionSet) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Action_Timer
	//	*Action_ExecActivity
	//	*Action_ExecChildWorkflow
	//	*Action_AwaitWorkflowState
	//	*Action_SendSignal
	//	*Action_CancelWorkflow
	//	*Action_SetPatchMarker
	//	*Action_UpsertSearchAttributes
	//	*Action_UpsertMemo
	//	*Action_SetWorkflowState
	//	*Action_ReturnResult
	//	*Action_ReturnError
	//	*Action_ContinueAsNew
	//	*Action_NestedActionSet
	Variant isAction_Variant `protobuf_oneof:"variant"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{13}
}

func (m *Action) GetVariant() isAction_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Action) GetTimer() *TimerAction {
	if x, ok := x.GetVariant().(*Action_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Action) GetExecActivity() *ExecuteActivityAction {
	if x, ok := x.GetVariant().(*Action_ExecActivity); ok {
		return x.ExecActivity
	}
	return nil
}

func (x *Action) GetExecChildWorkflow() *ExecuteChildWorkflowAction {
	if x, ok := x.GetVariant().(*Action_ExecChildWorkflow); ok {
		return x.ExecChildWorkflow
	}
	return nil
}

func (x *Action) GetAwaitWorkflowState() *AwaitWorkflowState {
	if x, ok := x.GetVariant().(*Action_AwaitWorkflowState); ok {
		return x.AwaitWorkflowState
	}
	return nil
}

func (x *Action) GetSendSignal() *SendSignalAction {
	if x, ok := x.GetVariant().(*Action_SendSignal); ok {
		return x.SendSignal
	}
	return nil
}

func (x *Action) GetCancelWorkflow() *CancelWorkflowAction {
	if x, ok := x.GetVariant().(*Action_CancelWorkflow); ok {
		return x.CancelWorkflow
	}
	return nil
}

func (x *Action) GetSetPatchMarker() *SetPatchMarkerAction {
	if x, ok := x.GetVariant().(*Action_SetPatchMarker); ok {
		return x.SetPatchMarker
	}
	return nil
}

func (x *Action) GetUpsertSearchAttributes() *UpsertSearchAttributesAction {
	if x, ok := x.GetVariant().(*Action_UpsertSearchAttributes); ok {
		return x.UpsertSearchAttributes
	}
	return nil
}

func (x *Action) GetUpsertMemo() *UpsertMemoAction {
	if x, ok := x.GetVariant().(*Action_UpsertMemo); ok {
		return x.UpsertMemo
	}
	return nil
}

func (x *Action) GetSetWorkflowState() *WorkflowState {
	if x, ok := x.GetVariant().(*Action_SetWorkflowState); ok {
		return x.SetWorkflowState
	}
	return nil
}

func (x *Action) GetReturnResult() *ReturnResultAction {
	if x, ok := x.GetVariant().(*Action_ReturnResult); ok {
		return x.ReturnResult
	}
	return nil
}

func (x *Action) GetReturnError() *ReturnErrorAction {
	if x, ok := x.GetVariant().(*Action_ReturnError); ok {
		return x.ReturnError
	}
	return nil
}

func (x *Action) GetContinueAsNew() *ContinueAsNewAction {
	if x, ok := x.GetVariant().(*Action_ContinueAsNew); ok {
		return x.ContinueAsNew
	}
	return nil
}

func (x *Action) GetNestedActionSet() *ActionSet {
	if x, ok := x.GetVariant().(*Action_NestedActionSet); ok {
		return x.NestedActionSet
	}
	return nil
}

type isAction_Variant interface {
	isAction_Variant()
}

type Action_Timer struct {
	Timer *TimerAction `protobuf:"bytes,1,opt,name=timer,proto3,oneof"`
}

type Action_ExecActivity struct {
	ExecActivity *ExecuteActivityAction `protobuf:"bytes,2,opt,name=exec_activity,json=execActivity,proto3,oneof"`
}

type Action_ExecChildWorkflow struct {
	ExecChildWorkflow *ExecuteChildWorkflowAction `protobuf:"bytes,3,opt,name=exec_child_workflow,json=execChildWorkflow,proto3,oneof"`
}

type Action_AwaitWorkflowState struct {
	AwaitWorkflowState *AwaitWorkflowState `protobuf:"bytes,4,opt,name=await_workflow_state,json=awaitWorkflowState,proto3,oneof"`
}

type Action_SendSignal struct {
	SendSignal *SendSignalAction `protobuf:"bytes,5,opt,name=send_signal,json=sendSignal,proto3,oneof"`
}

type Action_CancelWorkflow struct {
	CancelWorkflow *CancelWorkflowAction `protobuf:"bytes,6,opt,name=cancel_workflow,json=cancelWorkflow,proto3,oneof"`
}

type Action_SetPatchMarker struct {
	SetPatchMarker *SetPatchMarkerAction `protobuf:"bytes,7,opt,name=set_patch_marker,json=setPatchMarker,proto3,oneof"`
}

type Action_UpsertSearchAttributes struct {
	UpsertSearchAttributes *UpsertSearchAttributesAction `protobuf:"bytes,8,opt,name=upsert_search_attributes,json=upsertSearchAttributes,proto3,oneof"`
}

type Action_UpsertMemo struct {
	UpsertMemo *UpsertMemoAction `protobuf:"bytes,9,opt,name=upsert_memo,json=upsertMemo,proto3,oneof"`
}

type Action_SetWorkflowState struct {
	SetWorkflowState *WorkflowState `protobuf:"bytes,10,opt,name=set_workflow_state,json=setWorkflowState,proto3,oneof"`
}

type Action_ReturnResult struct {
	ReturnResult *ReturnResultAction `protobuf:"bytes,11,opt,name=return_result,json=returnResult,proto3,oneof"`
}

type Action_ReturnError struct {
	ReturnError *ReturnErrorAction `protobuf:"bytes,12,opt,name=return_error,json=returnError,proto3,oneof"`
}

type Action_ContinueAsNew struct {
	ContinueAsNew *ContinueAsNewAction `protobuf:"bytes,13,opt,name=continue_as_new,json=continueAsNew,proto3,oneof"`
}

type Action_NestedActionSet struct {
	NestedActionSet *ActionSet `protobuf:"bytes,14,opt,name=nested_action_set,json=nestedActionSet,proto3,oneof"`
}

func (*Action_Timer) isAction_Variant() {}

func (*Action_ExecActivity) isAction_Variant() {}

func (*Action_ExecChildWorkflow) isAction_Variant() {}

func (*Action_AwaitWorkflowState) isAction_Variant() {}

func (*Action_SendSignal) isAction_Variant() {}

func (*Action_CancelWorkflow) isAction_Variant() {}

func (*Action_SetPatchMarker) isAction_Variant() {}

func (*Action_UpsertSearchAttributes) isAction_Variant() {}

func (*Action_UpsertMemo) isAction_Variant() {}

func (*Action_SetWorkflowState) isAction_Variant() {}

func (*Action_ReturnResult) isAction_Variant() {}

func (*Action_ReturnError) isAction_Variant() {}

func (*Action_ContinueAsNew) isAction_Variant() {}

func (*Action_NestedActionSet) isAction_Variant() {}

// All await commands will have this available as a field. If it is set, the command
// should be either awaited upon, cancelled, or abandoned at the specified juncture (if possible,
// not all command types will be cancellable at all stages. Is is up to the generator to produce
// valid conditions).
type AwaitableChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//
	//	*AwaitableChoice_WaitFinish
	//	*AwaitableChoice_Abandon
	//	*AwaitableChoice_CancelBeforeStarted
	//	*AwaitableChoice_CancelAfterStarted
	//	*AwaitableChoice_CancelAfterCompleted
	Condition isAwaitableChoice_Condition `protobuf_oneof:"condition"`
}

func (x *AwaitableChoice) Reset() {
	*x = AwaitableChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwaitableChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwaitableChoice) ProtoMessage() {}

func (x *AwaitableChoice) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwaitableChoice.ProtoReflect.Descriptor instead.
func (*AwaitableChoice) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{14}
}

func (m *AwaitableChoice) GetCondition() isAwaitableChoice_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *AwaitableChoice) GetWaitFinish() *emptypb.Empty {
	if x, ok := x.GetCondition().(*AwaitableChoice_WaitFinish); ok {
		return x.WaitFinish
	}
	return nil
}

func (x *AwaitableChoice) GetAbandon() *emptypb.Empty {
	if x, ok := x.GetCondition().(*AwaitableChoice_Abandon); ok {
		return x.Abandon
	}
	return nil
}

func (x *AwaitableChoice) GetCancelBeforeStarted() *emptypb.Empty {
	if x, ok := x.GetCondition().(*AwaitableChoice_CancelBeforeStarted); ok {
		return x.CancelBeforeStarted
	}
	return nil
}

func (x *AwaitableChoice) GetCancelAfterStarted() *emptypb.Empty {
	if x, ok := x.GetCondition().(*AwaitableChoice_CancelAfterStarted); ok {
		return x.CancelAfterStarted
	}
	return nil
}

func (x *AwaitableChoice) GetCancelAfterCompleted() *emptypb.Empty {
	if x, ok := x.GetCondition().(*AwaitableChoice_CancelAfterCompleted); ok {
		return x.CancelAfterCompleted
	}
	return nil
}

type isAwaitableChoice_Condition interface {
	isAwaitableChoice_Condition()
}

type AwaitableChoice_WaitFinish struct {
	// Wait for the command to finish. This is the default.
	WaitFinish *emptypb.Empty `protobuf:"bytes,1,opt,name=wait_finish,json=waitFinish,proto3,oneof"`
}

type AwaitableChoice_Abandon struct {
	// Call the command API but immediately move on. IE: Don't await on it at all.
	Abandon *emptypb.Empty `protobuf:"bytes,2,opt,name=abandon,proto3,oneof"`
}

type AwaitableChoice_CancelBeforeStarted struct {
	// Cancel the command before it's begun - IE: Cancel it immediately after starting it with
	// no await, within the same workflow task.
	CancelBeforeStarted *emptypb.Empty `protobuf:"bytes,3,opt,name=cancel_before_started,json=cancelBeforeStarted,proto3,oneof"`
}

type AwaitableChoice_CancelAfterStarted struct {
	// Cancel the command after it's been started. Not all SDKs will know when a command is started
	// and in those cases they should issue the cancellation in the next workflow task after
	// creating the command.
	CancelAfterStarted *emptypb.Empty `protobuf:"bytes,4,opt,name=cancel_after_started,json=cancelAfterStarted,proto3,oneof"`
}

type AwaitableChoice_CancelAfterCompleted struct {
	// Cancel the command after it's already completed.
	CancelAfterCompleted *emptypb.Empty `protobuf:"bytes,5,opt,name=cancel_after_completed,json=cancelAfterCompleted,proto3,oneof"`
}

func (*AwaitableChoice_WaitFinish) isAwaitableChoice_Condition() {}

func (*AwaitableChoice_Abandon) isAwaitableChoice_Condition() {}

func (*AwaitableChoice_CancelBeforeStarted) isAwaitableChoice_Condition() {}

func (*AwaitableChoice_CancelAfterStarted) isAwaitableChoice_Condition() {}

func (*AwaitableChoice_CancelAfterCompleted) isAwaitableChoice_Condition() {}

type TimerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Milliseconds    uint64           `protobuf:"varint,1,opt,name=milliseconds,proto3" json:"milliseconds,omitempty"`
	AwaitableChoice *AwaitableChoice `protobuf:"bytes,2,opt,name=awaitable_choice,json=awaitableChoice,proto3" json:"awaitable_choice,omitempty"`
}

func (x *TimerAction) Reset() {
	*x = TimerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerAction) ProtoMessage() {}

func (x *TimerAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerAction.ProtoReflect.Descriptor instead.
func (*TimerAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{15}
}

func (x *TimerAction) GetMilliseconds() uint64 {
	if x != nil {
		return x.Milliseconds
	}
	return 0
}

func (x *TimerAction) GetAwaitableChoice() *AwaitableChoice {
	if x != nil {
		return x.AwaitableChoice
	}
	return nil
}

type ExecuteActivityAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActivityType:
	//
	//	*ExecuteActivityAction_Generic
	//	*ExecuteActivityAction_Delay
	//	*ExecuteActivityAction_Noop
	//	*ExecuteActivityAction_Resources
	ActivityType isExecuteActivityAction_ActivityType `protobuf_oneof:"activity_type"`
	// The name of the task queue to place this activity request in
	TaskQueue string                 `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Headers   map[string]*v1.Payload `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicates how long the caller is willing to wait for an activity completion. Limits how long
	// retries will be attempted. Either this or start_to_close_timeout_seconds must be specified.
	// When not specified defaults to the workflow execution timeout.
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Limits time an activity task can stay in a task queue before a worker picks it up. This
	// timeout is always non retryable as all a retry would achieve is to put it back into the same
	// queue. Defaults to schedule_to_close_timeout or workflow execution timeout if not specified.
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// Maximum time an activity is allowed to execute after a pick up by a worker. This timeout is
	// always retryable. Either this or schedule_to_close_timeout must be specified.
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// Maximum time allowed between successful worker heartbeats.
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// Activities are provided by a default retry policy controlled through the service dynamic
	// configuration. Retries are happening up to schedule_to_close_timeout. To disable retries set
	// retry_policy.maximum_attempts to 1.
	RetryPolicy *v1.RetryPolicy `protobuf:"bytes,10,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Whether or not this activity will be a local activity
	//
	// Types that are assignable to Locality:
	//
	//	*ExecuteActivityAction_IsLocal
	//	*ExecuteActivityAction_Remote
	Locality        isExecuteActivityAction_Locality `protobuf_oneof:"locality"`
	AwaitableChoice *AwaitableChoice                 `protobuf:"bytes,13,opt,name=awaitable_choice,json=awaitableChoice,proto3" json:"awaitable_choice,omitempty"`
}

func (x *ExecuteActivityAction) Reset() {
	*x = ExecuteActivityAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteActivityAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActivityAction) ProtoMessage() {}

func (x *ExecuteActivityAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActivityAction.ProtoReflect.Descriptor instead.
func (*ExecuteActivityAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{16}
}

func (m *ExecuteActivityAction) GetActivityType() isExecuteActivityAction_ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (x *ExecuteActivityAction) GetGeneric() *ExecuteActivityAction_GenericActivity {
	if x, ok := x.GetActivityType().(*ExecuteActivityAction_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *ExecuteActivityAction) GetDelay() *durationpb.Duration {
	if x, ok := x.GetActivityType().(*ExecuteActivityAction_Delay); ok {
		return x.Delay
	}
	return nil
}

func (x *ExecuteActivityAction) GetNoop() *emptypb.Empty {
	if x, ok := x.GetActivityType().(*ExecuteActivityAction_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *ExecuteActivityAction) GetResources() *ExecuteActivityAction_ResourcesActivity {
	if x, ok := x.GetActivityType().(*ExecuteActivityAction_Resources); ok {
		return x.Resources
	}
	return nil
}

func (x *ExecuteActivityAction) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ExecuteActivityAction) GetHeaders() map[string]*v1.Payload {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ExecuteActivityAction) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ExecuteActivityAction) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ExecuteActivityAction) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ExecuteActivityAction) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ExecuteActivityAction) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (m *ExecuteActivityAction) GetLocality() isExecuteActivityAction_Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (x *ExecuteActivityAction) GetIsLocal() *emptypb.Empty {
	if x, ok := x.GetLocality().(*ExecuteActivityAction_IsLocal); ok {
		return x.IsLocal
	}
	return nil
}

func (x *ExecuteActivityAction) GetRemote() *RemoteActivityOptions {
	if x, ok := x.GetLocality().(*ExecuteActivityAction_Remote); ok {
		return x.Remote
	}
	return nil
}

func (x *ExecuteActivityAction) GetAwaitableChoice() *AwaitableChoice {
	if x != nil {
		return x.AwaitableChoice
	}
	return nil
}

type isExecuteActivityAction_ActivityType interface {
	isExecuteActivityAction_ActivityType()
}

type ExecuteActivityAction_Generic struct {
	Generic *ExecuteActivityAction_GenericActivity `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type ExecuteActivityAction_Delay struct {
	// There must be an activity named `delay` which accepts some kind of duration and waits
	// for that long
	Delay *durationpb.Duration `protobuf:"bytes,2,opt,name=delay,proto3,oneof"`
}

type ExecuteActivityAction_Noop struct {
	// There must be an activity named `noop` which does nothing
	Noop *emptypb.Empty `protobuf:"bytes,3,opt,name=noop,proto3,oneof"`
}

type ExecuteActivityAction_Resources struct {
	// There must be an activity named `resources` which accepts the ResourcesActivity message as input
	Resources *ExecuteActivityAction_ResourcesActivity `protobuf:"bytes,14,opt,name=resources,proto3,oneof"`
}

func (*ExecuteActivityAction_Generic) isExecuteActivityAction_ActivityType() {}

func (*ExecuteActivityAction_Delay) isExecuteActivityAction_ActivityType() {}

func (*ExecuteActivityAction_Noop) isExecuteActivityAction_ActivityType() {}

func (*ExecuteActivityAction_Resources) isExecuteActivityAction_ActivityType() {}

type isExecuteActivityAction_Locality interface {
	isExecuteActivityAction_Locality()
}

type ExecuteActivityAction_IsLocal struct {
	IsLocal *emptypb.Empty `protobuf:"bytes,11,opt,name=is_local,json=isLocal,proto3,oneof"`
}

type ExecuteActivityAction_Remote struct {
	Remote *RemoteActivityOptions `protobuf:"bytes,12,opt,name=remote,proto3,oneof"`
}

func (*ExecuteActivityAction_IsLocal) isExecuteActivityAction_Locality() {}

func (*ExecuteActivityAction_Remote) isExecuteActivityAction_Locality() {}

type ExecuteChildWorkflowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string        `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string        `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    string        `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        []*v1.Payload `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy ParentClosePolicy `protobuf:"varint,10,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.omes.kitchen_sink.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy v11.WorkflowIdReusePolicy `protobuf:"varint,12,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *v1.RetryPolicy           `protobuf:"bytes,13,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule          string                    `protobuf:"bytes,14,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	// Header fields
	Headers map[string]*v1.Payload `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Memo fields
	Memo map[string]*v1.Payload `protobuf:"bytes,16,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Search attributes
	SearchAttributes map[string]*v1.Payload `protobuf:"bytes,17,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Defines behaviour of the underlying workflow when child workflow cancellation has been requested.
	CancellationType ChildWorkflowCancellationType `protobuf:"varint,18,opt,name=cancellation_type,json=cancellationType,proto3,enum=temporal.omes.kitchen_sink.ChildWorkflowCancellationType" json:"cancellation_type,omitempty"`
	// Whether this child should run on a worker with a compatible build id or not.
	VersioningIntent VersioningIntent `protobuf:"varint,19,opt,name=versioning_intent,json=versioningIntent,proto3,enum=temporal.omes.kitchen_sink.VersioningIntent" json:"versioning_intent,omitempty"`
	AwaitableChoice  *AwaitableChoice `protobuf:"bytes,20,opt,name=awaitable_choice,json=awaitableChoice,proto3" json:"awaitable_choice,omitempty"`
}

func (x *ExecuteChildWorkflowAction) Reset() {
	*x = ExecuteChildWorkflowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteChildWorkflowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteChildWorkflowAction) ProtoMessage() {}

func (x *ExecuteChildWorkflowAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteChildWorkflowAction.ProtoReflect.Descriptor instead.
func (*ExecuteChildWorkflowAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{17}
}

func (x *ExecuteChildWorkflowAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ExecuteChildWorkflowAction) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ExecuteChildWorkflowAction) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *ExecuteChildWorkflowAction) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ExecuteChildWorkflowAction) GetInput() []*v1.Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (x *ExecuteChildWorkflowAction) GetWorkflowIdReusePolicy() v11.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return v11.WorkflowIdReusePolicy(0)
}

func (x *ExecuteChildWorkflowAction) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *ExecuteChildWorkflowAction) GetHeaders() map[string]*v1.Payload {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetMemo() map[string]*v1.Payload {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetSearchAttributes() map[string]*v1.Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *ExecuteChildWorkflowAction) GetCancellationType() ChildWorkflowCancellationType {
	if x != nil {
		return x.CancellationType
	}
	return ChildWorkflowCancellationType_CHILD_WF_ABANDON
}

func (x *ExecuteChildWorkflowAction) GetVersioningIntent() VersioningIntent {
	if x != nil {
		return x.VersioningIntent
	}
	return VersioningIntent_UNSPECIFIED
}

func (x *ExecuteChildWorkflowAction) GetAwaitableChoice() *AwaitableChoice {
	if x != nil {
		return x.AwaitableChoice
	}
	return nil
}

// Wait for the workflow state to have a matching k/v entry
type AwaitWorkflowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AwaitWorkflowState) Reset() {
	*x = AwaitWorkflowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwaitWorkflowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwaitWorkflowState) ProtoMessage() {}

func (x *AwaitWorkflowState) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwaitWorkflowState.ProtoReflect.Descriptor instead.
func (*AwaitWorkflowState) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{18}
}

func (x *AwaitWorkflowState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AwaitWorkflowState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SendSignalAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What workflow is being targeted
	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Name of the signal handler
	SignalName string `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Arguments for the handler
	Args []*v1.Payload `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Headers to attach to the signal
	Headers         map[string]*v1.Payload `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AwaitableChoice *AwaitableChoice       `protobuf:"bytes,6,opt,name=awaitable_choice,json=awaitableChoice,proto3" json:"awaitable_choice,omitempty"`
}

func (x *SendSignalAction) Reset() {
	*x = SendSignalAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSignalAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignalAction) ProtoMessage() {}

func (x *SendSignalAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignalAction.ProtoReflect.Descriptor instead.
func (*SendSignalAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{19}
}

func (x *SendSignalAction) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SendSignalAction) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SendSignalAction) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SendSignalAction) GetArgs() []*v1.Payload {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SendSignalAction) GetHeaders() map[string]*v1.Payload {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SendSignalAction) GetAwaitableChoice() *AwaitableChoice {
	if x != nil {
		return x.AwaitableChoice
	}
	return nil
}

// Cancel an external workflow (may be a child)
type CancelWorkflowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *CancelWorkflowAction) Reset() {
	*x = CancelWorkflowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowAction) ProtoMessage() {}

func (x *CancelWorkflowAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowAction.ProtoReflect.Descriptor instead.
func (*CancelWorkflowAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{20}
}

func (x *CancelWorkflowAction) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CancelWorkflowAction) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// patched or getVersion API
// For getVersion SDKs, use `DEFAULT_VERSION, 1` as the numeric arguments,
type SetPatchMarkerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-chosen identifier for this patch. If the same identifier is used in multiple places in
	// the code, those places are considered to be versioned as one unit. IE: The check call will
	// return the same result for all of them
	PatchId string `protobuf:"bytes,1,opt,name=patch_id,json=patchId,proto3" json:"patch_id,omitempty"`
	// TODO Not sure how we could use this in these tests
	// Can be set to true to indicate that branches using this change are being removed, and all
	// future worker deployments will only have the "with change" code in them.
	Deprecated bool `protobuf:"varint,2,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// Perform this action behind the if guard
	InnerAction *Action `protobuf:"bytes,3,opt,name=inner_action,json=innerAction,proto3" json:"inner_action,omitempty"`
}

func (x *SetPatchMarkerAction) Reset() {
	*x = SetPatchMarkerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPatchMarkerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPatchMarkerAction) ProtoMessage() {}

func (x *SetPatchMarkerAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPatchMarkerAction.ProtoReflect.Descriptor instead.
func (*SetPatchMarkerAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{21}
}

func (x *SetPatchMarkerAction) GetPatchId() string {
	if x != nil {
		return x.PatchId
	}
	return ""
}

func (x *SetPatchMarkerAction) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SetPatchMarkerAction) GetInnerAction() *Action {
	if x != nil {
		return x.InnerAction
	}
	return nil
}

type UpsertSearchAttributesAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SearchAttributes fields - equivalent to indexed_fields on api. Key = search index, Value =
	// value
	SearchAttributes map[string]*v1.Payload `protobuf:"bytes,1,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpsertSearchAttributesAction) Reset() {
	*x = UpsertSearchAttributesAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSearchAttributesAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSearchAttributesAction) ProtoMessage() {}

func (x *UpsertSearchAttributesAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSearchAttributesAction.ProtoReflect.Descriptor instead.
func (*UpsertSearchAttributesAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{22}
}

func (x *UpsertSearchAttributesAction) GetSearchAttributes() map[string]*v1.Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type UpsertMemoAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update the workflow memo with the provided values. The values will be merged with
	// the existing memo. If the user wants to delete values, a default/empty Payload should be
	// used as the value for the key being deleted.
	UpsertedMemo *v1.Memo `protobuf:"bytes,1,opt,name=upserted_memo,json=upsertedMemo,proto3" json:"upserted_memo,omitempty"`
}

func (x *UpsertMemoAction) Reset() {
	*x = UpsertMemoAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMemoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMemoAction) ProtoMessage() {}

func (x *UpsertMemoAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMemoAction.ProtoReflect.Descriptor instead.
func (*UpsertMemoAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{23}
}

func (x *UpsertMemoAction) GetUpsertedMemo() *v1.Memo {
	if x != nil {
		return x.UpsertedMemo
	}
	return nil
}

type ReturnResultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnThis *v1.Payload `protobuf:"bytes,1,opt,name=return_this,json=returnThis,proto3" json:"return_this,omitempty"`
}

func (x *ReturnResultAction) Reset() {
	*x = ReturnResultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnResultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnResultAction) ProtoMessage() {}

func (x *ReturnResultAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnResultAction.ProtoReflect.Descriptor instead.
func (*ReturnResultAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{24}
}

func (x *ReturnResultAction) GetReturnThis() *v1.Payload {
	if x != nil {
		return x.ReturnThis
	}
	return nil
}

type ReturnErrorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *v12.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ReturnErrorAction) Reset() {
	*x = ReturnErrorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnErrorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnErrorAction) ProtoMessage() {}

func (x *ReturnErrorAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnErrorAction.ProtoReflect.Descriptor instead.
func (*ReturnErrorAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{25}
}

func (x *ReturnErrorAction) GetFailure() *v12.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ContinueAsNewAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier the lang-specific sdk uses to execute workflow code
	WorkflowType string `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Task queue for the new workflow execution
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Inputs to the workflow code. Should be specified. Will not re-use old arguments, as that
	// typically wouldn't make any sense.
	Arguments []*v1.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// Timeout for a single run of the new workflow. Will not re-use current workflow's value.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task. Will not re-use current workflow's value.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// If set, the new workflow will have this memo. If unset, re-uses the current workflow's memo
	Memo map[string]*v1.Payload `protobuf:"bytes,6,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If set, the new workflow will have these headers. Will *not* re-use current workflow's
	// headers otherwise.
	Headers map[string]*v1.Payload `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If set, the new workflow will have these search attributes. If unset, re-uses the current
	// workflow's search attributes.
	SearchAttributes map[string]*v1.Payload `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If set, the new workflow will have this retry policy. If unset, re-uses the current
	// workflow's retry policy.
	RetryPolicy *v1.RetryPolicy `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Whether the continued workflow should run on a worker with a compatible build id or not.
	VersioningIntent VersioningIntent `protobuf:"varint,10,opt,name=versioning_intent,json=versioningIntent,proto3,enum=temporal.omes.kitchen_sink.VersioningIntent" json:"versioning_intent,omitempty"`
}

func (x *ContinueAsNewAction) Reset() {
	*x = ContinueAsNewAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewAction) ProtoMessage() {}

func (x *ContinueAsNewAction) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewAction.ProtoReflect.Descriptor instead.
func (*ContinueAsNewAction) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{26}
}

func (x *ContinueAsNewAction) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *ContinueAsNewAction) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ContinueAsNewAction) GetArguments() []*v1.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ContinueAsNewAction) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *ContinueAsNewAction) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *ContinueAsNewAction) GetMemo() map[string]*v1.Payload {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ContinueAsNewAction) GetHeaders() map[string]*v1.Payload {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ContinueAsNewAction) GetSearchAttributes() map[string]*v1.Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *ContinueAsNewAction) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ContinueAsNewAction) GetVersioningIntent() VersioningIntent {
	if x != nil {
		return x.VersioningIntent
	}
	return VersioningIntent_UNSPECIFIED
}

type RemoteActivityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines how the workflow will wait (or not) for cancellation of the activity to be confirmed
	CancellationType ActivityCancellationType `protobuf:"varint,1,opt,name=cancellation_type,json=cancellationType,proto3,enum=temporal.omes.kitchen_sink.ActivityCancellationType" json:"cancellation_type,omitempty"`
	// If set, the worker will not tell the service that it can immediately start executing this
	// activity. When unset/default, workers will always attempt to do so if activity execution
	// slots are available.
	DoNotEagerlyExecute bool `protobuf:"varint,2,opt,name=do_not_eagerly_execute,json=doNotEagerlyExecute,proto3" json:"do_not_eagerly_execute,omitempty"`
	// Whether this activity should run on a worker with a compatible build id or not.
	VersioningIntent VersioningIntent `protobuf:"varint,3,opt,name=versioning_intent,json=versioningIntent,proto3,enum=temporal.omes.kitchen_sink.VersioningIntent" json:"versioning_intent,omitempty"`
}

func (x *RemoteActivityOptions) Reset() {
	*x = RemoteActivityOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteActivityOptions) ProtoMessage() {}

func (x *RemoteActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteActivityOptions.ProtoReflect.Descriptor instead.
func (*RemoteActivityOptions) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{27}
}

func (x *RemoteActivityOptions) GetCancellationType() ActivityCancellationType {
	if x != nil {
		return x.CancellationType
	}
	return ActivityCancellationType_TRY_CANCEL
}

func (x *RemoteActivityOptions) GetDoNotEagerlyExecute() bool {
	if x != nil {
		return x.DoNotEagerlyExecute
	}
	return false
}

func (x *RemoteActivityOptions) GetVersioningIntent() VersioningIntent {
	if x != nil {
		return x.VersioningIntent
	}
	return VersioningIntent_UNSPECIFIED
}

type DoSignal_DoSignalActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*DoSignal_DoSignalActions_DoActions
	//	*DoSignal_DoSignalActions_DoActionsInMain
	Variant isDoSignal_DoSignalActions_Variant `protobuf_oneof:"variant"`
}

func (x *DoSignal_DoSignalActions) Reset() {
	*x = DoSignal_DoSignalActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoSignal_DoSignalActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoSignal_DoSignalActions) ProtoMessage() {}

func (x *DoSignal_DoSignalActions) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoSignal_DoSignalActions.ProtoReflect.Descriptor instead.
func (*DoSignal_DoSignalActions) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{5, 0}
}

func (m *DoSignal_DoSignalActions) GetVariant() isDoSignal_DoSignalActions_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *DoSignal_DoSignalActions) GetDoActions() *ActionSet {
	if x, ok := x.GetVariant().(*DoSignal_DoSignalActions_DoActions); ok {
		return x.DoActions
	}
	return nil
}

func (x *DoSignal_DoSignalActions) GetDoActionsInMain() *ActionSet {
	if x, ok := x.GetVariant().(*DoSignal_DoSignalActions_DoActionsInMain); ok {
		return x.DoActionsInMain
	}
	return nil
}

type isDoSignal_DoSignalActions_Variant interface {
	isDoSignal_DoSignalActions_Variant()
}

type DoSignal_DoSignalActions_DoActions struct {
	// Execute the action set in the handler. Since Go doesn't have explicit signal handlers it
	// should instead run the actions in a goroutine for both of these variants, as the
	// distinction doesn't really matter there.
	DoActions *ActionSet `protobuf:"bytes,1,opt,name=do_actions,json=doActions,proto3,oneof"`
}

type DoSignal_DoSignalActions_DoActionsInMain struct {
	// Pipe the actions back to the main workflow function via a queue or similar mechanism, where
	// they will then be run.
	DoActionsInMain *ActionSet `protobuf:"bytes,2,opt,name=do_actions_in_main,json=doActionsInMain,proto3,oneof"`
}

func (*DoSignal_DoSignalActions_DoActions) isDoSignal_DoSignalActions_Variant() {}

func (*DoSignal_DoSignalActions_DoActionsInMain) isDoSignal_DoSignalActions_Variant() {}

type ExecuteActivityAction_GenericActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Arguments []*v1.Payload `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ExecuteActivityAction_GenericActivity) Reset() {
	*x = ExecuteActivityAction_GenericActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteActivityAction_GenericActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActivityAction_GenericActivity) ProtoMessage() {}

func (x *ExecuteActivityAction_GenericActivity) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActivityAction_GenericActivity.ProtoReflect.Descriptor instead.
func (*ExecuteActivityAction_GenericActivity) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ExecuteActivityAction_GenericActivity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecuteActivityAction_GenericActivity) GetArguments() []*v1.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type ExecuteActivityAction_ResourcesActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunFor                   *durationpb.Duration `protobuf:"bytes,1,opt,name=run_for,json=runFor,proto3" json:"run_for,omitempty"`
	BytesToAllocate          uint64               `protobuf:"varint,2,opt,name=bytes_to_allocate,json=bytesToAllocate,proto3" json:"bytes_to_allocate,omitempty"`
	CpuYieldEveryNIterations uint32               `protobuf:"varint,3,opt,name=cpu_yield_every_n_iterations,json=cpuYieldEveryNIterations,proto3" json:"cpu_yield_every_n_iterations,omitempty"`
	CpuYieldForMs            uint32               `protobuf:"varint,4,opt,name=cpu_yield_for_ms,json=cpuYieldForMs,proto3" json:"cpu_yield_for_ms,omitempty"`
}

func (x *ExecuteActivityAction_ResourcesActivity) Reset() {
	*x = ExecuteActivityAction_ResourcesActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kitchen_sink_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteActivityAction_ResourcesActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActivityAction_ResourcesActivity) ProtoMessage() {}

func (x *ExecuteActivityAction_ResourcesActivity) ProtoReflect() protoreflect.Message {
	mi := &file_kitchen_sink_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActivityAction_ResourcesActivity.ProtoReflect.Descriptor instead.
func (*ExecuteActivityAction_ResourcesActivity) Descriptor() ([]byte, []int) {
	return file_kitchen_sink_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ExecuteActivityAction_ResourcesActivity) GetRunFor() *durationpb.Duration {
	if x != nil {
		return x.RunFor
	}
	return nil
}

func (x *ExecuteActivityAction_ResourcesActivity) GetBytesToAllocate() uint64 {
	if x != nil {
		return x.BytesToAllocate
	}
	return 0
}

func (x *ExecuteActivityAction_ResourcesActivity) GetCpuYieldEveryNIterations() uint32 {
	if x != nil {
		return x.CpuYieldEveryNIterations
	}
	return 0
}

func (x *ExecuteActivityAction_ResourcesActivity) GetCpuYieldForMs() uint32 {
	if x != nil {
		return x.CpuYieldForMs
	}
	return 0
}

var File_kitchen_sink_proto protoreflect.FileDescriptor

var file_kitchen_sink_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x91, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x50,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x77, 0x61,
	0x69, 0x74, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x25, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x08, 0x64,
	0x6f, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a,
	0x09, 0x64, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x22, 0x9e, 0x03, 0x0a, 0x08, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x62, 0x0a, 0x11, 0x64, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xba, 0x01, 0x0a,
	0x0f, 0x44, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x46, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x64, 0x6f, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x44, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65,
	0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x5c, 0x0a,
	0x11, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4b, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x6b, 0x76, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x4b, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x09,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65,
	0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x68, 0x0a,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61, 0x77, 0x61, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x0f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x18, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x0b, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d,
	0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x59,
	0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x12,
	0x53, 0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0xf7, 0x02, 0x0a, 0x0f, 0x41, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x32,
	0x0a, 0x07, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x4a, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x16,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a,
	0x10, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xda, 0x0b, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x31,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12,
	0x63, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d,
	0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x4b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x61,
	0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x75, 0x6e,
	0x46, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x70, 0x75, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x4e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x73, 0x1a, 0x5b, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xe6, 0x0c, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4d, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x5d, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x65, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x79, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x77,
	0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x61,
	0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x5b,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x09, 0x4d,
	0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x12, 0x41,
	0x77, 0x61, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x10, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x5b, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x81, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x64, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x0c,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x56, 0x0a, 0x12,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x68, 0x69,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x68, 0x69, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x08, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x56, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x59, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x09, 0x4d, 0x65,
	0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x64, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x61, 0x67, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x45, 0x61, 0x67, 0x65, 0x72,
	0x6c, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2a, 0xa4, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x10, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a, 0xa2, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x46, 0x5f, 0x41, 0x42, 0x41, 0x4e,
	0x44, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57,
	0x46, 0x5f, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x46, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x5f, 0x57, 0x46, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x58, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x42, 0x0a, 0x10,
	0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x6f, 0x6d, 0x65, 0x73,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2f, 0x6f, 0x6d, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x6b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kitchen_sink_proto_rawDescOnce sync.Once
	file_kitchen_sink_proto_rawDescData = file_kitchen_sink_proto_rawDesc
)

func file_kitchen_sink_proto_rawDescGZIP() []byte {
	file_kitchen_sink_proto_rawDescOnce.Do(func() {
		file_kitchen_sink_proto_rawDescData = protoimpl.X.CompressGZIP(file_kitchen_sink_proto_rawDescData)
	})
	return file_kitchen_sink_proto_rawDescData
}

var file_kitchen_sink_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kitchen_sink_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_kitchen_sink_proto_goTypes = []interface{}{
	(ParentClosePolicy)(0),                          // 0: temporal.omes.kitchen_sink.ParentClosePolicy
	(VersioningIntent)(0),                           // 1: temporal.omes.kitchen_sink.VersioningIntent
	(ChildWorkflowCancellationType)(0),              // 2: temporal.omes.kitchen_sink.ChildWorkflowCancellationType
	(ActivityCancellationType)(0),                   // 3: temporal.omes.kitchen_sink.ActivityCancellationType
	(*TestInput)(nil),                               // 4: temporal.omes.kitchen_sink.TestInput
	(*ClientSequence)(nil),                          // 5: temporal.omes.kitchen_sink.ClientSequence
	(*ClientActionSet)(nil),                         // 6: temporal.omes.kitchen_sink.ClientActionSet
	(*WithStartClientAction)(nil),                   // 7: temporal.omes.kitchen_sink.WithStartClientAction
	(*ClientAction)(nil),                            // 8: temporal.omes.kitchen_sink.ClientAction
	(*DoSignal)(nil),                                // 9: temporal.omes.kitchen_sink.DoSignal
	(*DoQuery)(nil),                                 // 10: temporal.omes.kitchen_sink.DoQuery
	(*DoUpdate)(nil),                                // 11: temporal.omes.kitchen_sink.DoUpdate
	(*DoActionsUpdate)(nil),                         // 12: temporal.omes.kitchen_sink.DoActionsUpdate
	(*HandlerInvocation)(nil),                       // 13: temporal.omes.kitchen_sink.HandlerInvocation
	(*WorkflowState)(nil),                           // 14: temporal.omes.kitchen_sink.WorkflowState
	(*WorkflowInput)(nil),                           // 15: temporal.omes.kitchen_sink.WorkflowInput
	(*ActionSet)(nil),                               // 16: temporal.omes.kitchen_sink.ActionSet
	(*Action)(nil),                                  // 17: temporal.omes.kitchen_sink.Action
	(*AwaitableChoice)(nil),                         // 18: temporal.omes.kitchen_sink.AwaitableChoice
	(*TimerAction)(nil),                             // 19: temporal.omes.kitchen_sink.TimerAction
	(*ExecuteActivityAction)(nil),                   // 20: temporal.omes.kitchen_sink.ExecuteActivityAction
	(*ExecuteChildWorkflowAction)(nil),              // 21: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction
	(*AwaitWorkflowState)(nil),                      // 22: temporal.omes.kitchen_sink.AwaitWorkflowState
	(*SendSignalAction)(nil),                        // 23: temporal.omes.kitchen_sink.SendSignalAction
	(*CancelWorkflowAction)(nil),                    // 24: temporal.omes.kitchen_sink.CancelWorkflowAction
	(*SetPatchMarkerAction)(nil),                    // 25: temporal.omes.kitchen_sink.SetPatchMarkerAction
	(*UpsertSearchAttributesAction)(nil),            // 26: temporal.omes.kitchen_sink.UpsertSearchAttributesAction
	(*UpsertMemoAction)(nil),                        // 27: temporal.omes.kitchen_sink.UpsertMemoAction
	(*ReturnResultAction)(nil),                      // 28: temporal.omes.kitchen_sink.ReturnResultAction
	(*ReturnErrorAction)(nil),                       // 29: temporal.omes.kitchen_sink.ReturnErrorAction
	(*ContinueAsNewAction)(nil),                     // 30: temporal.omes.kitchen_sink.ContinueAsNewAction
	(*RemoteActivityOptions)(nil),                   // 31: temporal.omes.kitchen_sink.RemoteActivityOptions
	(*DoSignal_DoSignalActions)(nil),                // 32: temporal.omes.kitchen_sink.DoSignal.DoSignalActions
	nil,                                             // 33: temporal.omes.kitchen_sink.WorkflowState.KvsEntry
	(*ExecuteActivityAction_GenericActivity)(nil),   // 34: temporal.omes.kitchen_sink.ExecuteActivityAction.GenericActivity
	(*ExecuteActivityAction_ResourcesActivity)(nil), // 35: temporal.omes.kitchen_sink.ExecuteActivityAction.ResourcesActivity
	nil,                            // 36: temporal.omes.kitchen_sink.ExecuteActivityAction.HeadersEntry
	nil,                            // 37: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.HeadersEntry
	nil,                            // 38: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.MemoEntry
	nil,                            // 39: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.SearchAttributesEntry
	nil,                            // 40: temporal.omes.kitchen_sink.SendSignalAction.HeadersEntry
	nil,                            // 41: temporal.omes.kitchen_sink.UpsertSearchAttributesAction.SearchAttributesEntry
	nil,                            // 42: temporal.omes.kitchen_sink.ContinueAsNewAction.MemoEntry
	nil,                            // 43: temporal.omes.kitchen_sink.ContinueAsNewAction.HeadersEntry
	nil,                            // 44: temporal.omes.kitchen_sink.ContinueAsNewAction.SearchAttributesEntry
	(*durationpb.Duration)(nil),    // 45: google.protobuf.Duration
	(*v1.Payloads)(nil),            // 46: temporal.api.common.v1.Payloads
	(*emptypb.Empty)(nil),          // 47: google.protobuf.Empty
	(*v1.Payload)(nil),             // 48: temporal.api.common.v1.Payload
	(*v1.RetryPolicy)(nil),         // 49: temporal.api.common.v1.RetryPolicy
	(v11.WorkflowIdReusePolicy)(0), // 50: temporal.api.enums.v1.WorkflowIdReusePolicy
	(*v1.Memo)(nil),                // 51: temporal.api.common.v1.Memo
	(*v12.Failure)(nil),            // 52: temporal.api.failure.v1.Failure
}
var file_kitchen_sink_proto_depIdxs = []int32{
	15,  // 0: temporal.omes.kitchen_sink.TestInput.workflow_input:type_name -> temporal.omes.kitchen_sink.WorkflowInput
	5,   // 1: temporal.omes.kitchen_sink.TestInput.client_sequence:type_name -> temporal.omes.kitchen_sink.ClientSequence
	7,   // 2: temporal.omes.kitchen_sink.TestInput.with_start_action:type_name -> temporal.omes.kitchen_sink.WithStartClientAction
	6,   // 3: temporal.omes.kitchen_sink.ClientSequence.action_sets:type_name -> temporal.omes.kitchen_sink.ClientActionSet
	8,   // 4: temporal.omes.kitchen_sink.ClientActionSet.actions:type_name -> temporal.omes.kitchen_sink.ClientAction
	45,  // 5: temporal.omes.kitchen_sink.ClientActionSet.wait_at_end:type_name -> google.protobuf.Duration
	9,   // 6: temporal.omes.kitchen_sink.WithStartClientAction.do_signal:type_name -> temporal.omes.kitchen_sink.DoSignal
	11,  // 7: temporal.omes.kitchen_sink.WithStartClientAction.do_update:type_name -> temporal.omes.kitchen_sink.DoUpdate
	9,   // 8: temporal.omes.kitchen_sink.ClientAction.do_signal:type_name -> temporal.omes.kitchen_sink.DoSignal
	10,  // 9: temporal.omes.kitchen_sink.ClientAction.do_query:type_name -> temporal.omes.kitchen_sink.DoQuery
	11,  // 10: temporal.omes.kitchen_sink.ClientAction.do_update:type_name -> temporal.omes.kitchen_sink.DoUpdate
	6,   // 11: temporal.omes.kitchen_sink.ClientAction.nested_actions:type_name -> temporal.omes.kitchen_sink.ClientActionSet
	32,  // 12: temporal.omes.kitchen_sink.DoSignal.do_signal_actions:type_name -> temporal.omes.kitchen_sink.DoSignal.DoSignalActions
	13,  // 13: temporal.omes.kitchen_sink.DoSignal.custom:type_name -> temporal.omes.kitchen_sink.HandlerInvocation
	46,  // 14: temporal.omes.kitchen_sink.DoQuery.report_state:type_name -> temporal.api.common.v1.Payloads
	13,  // 15: temporal.omes.kitchen_sink.DoQuery.custom:type_name -> temporal.omes.kitchen_sink.HandlerInvocation
	12,  // 16: temporal.omes.kitchen_sink.DoUpdate.do_actions:type_name -> temporal.omes.kitchen_sink.DoActionsUpdate
	13,  // 17: temporal.omes.kitchen_sink.DoUpdate.custom:type_name -> temporal.omes.kitchen_sink.HandlerInvocation
	16,  // 18: temporal.omes.kitchen_sink.DoActionsUpdate.do_actions:type_name -> temporal.omes.kitchen_sink.ActionSet
	47,  // 19: temporal.omes.kitchen_sink.DoActionsUpdate.reject_me:type_name -> google.protobuf.Empty
	48,  // 20: temporal.omes.kitchen_sink.HandlerInvocation.args:type_name -> temporal.api.common.v1.Payload
	33,  // 21: temporal.omes.kitchen_sink.WorkflowState.kvs:type_name -> temporal.omes.kitchen_sink.WorkflowState.KvsEntry
	16,  // 22: temporal.omes.kitchen_sink.WorkflowInput.initial_actions:type_name -> temporal.omes.kitchen_sink.ActionSet
	17,  // 23: temporal.omes.kitchen_sink.ActionSet.actions:type_name -> temporal.omes.kitchen_sink.Action
	19,  // 24: temporal.omes.kitchen_sink.Action.timer:type_name -> temporal.omes.kitchen_sink.TimerAction
	20,  // 25: temporal.omes.kitchen_sink.Action.exec_activity:type_name -> temporal.omes.kitchen_sink.ExecuteActivityAction
	21,  // 26: temporal.omes.kitchen_sink.Action.exec_child_workflow:type_name -> temporal.omes.kitchen_sink.ExecuteChildWorkflowAction
	22,  // 27: temporal.omes.kitchen_sink.Action.await_workflow_state:type_name -> temporal.omes.kitchen_sink.AwaitWorkflowState
	23,  // 28: temporal.omes.kitchen_sink.Action.send_signal:type_name -> temporal.omes.kitchen_sink.SendSignalAction
	24,  // 29: temporal.omes.kitchen_sink.Action.cancel_workflow:type_name -> temporal.omes.kitchen_sink.CancelWorkflowAction
	25,  // 30: temporal.omes.kitchen_sink.Action.set_patch_marker:type_name -> temporal.omes.kitchen_sink.SetPatchMarkerAction
	26,  // 31: temporal.omes.kitchen_sink.Action.upsert_search_attributes:type_name -> temporal.omes.kitchen_sink.UpsertSearchAttributesAction
	27,  // 32: temporal.omes.kitchen_sink.Action.upsert_memo:type_name -> temporal.omes.kitchen_sink.UpsertMemoAction
	14,  // 33: temporal.omes.kitchen_sink.Action.set_workflow_state:type_name -> temporal.omes.kitchen_sink.WorkflowState
	28,  // 34: temporal.omes.kitchen_sink.Action.return_result:type_name -> temporal.omes.kitchen_sink.ReturnResultAction
	29,  // 35: temporal.omes.kitchen_sink.Action.return_error:type_name -> temporal.omes.kitchen_sink.ReturnErrorAction
	30,  // 36: temporal.omes.kitchen_sink.Action.continue_as_new:type_name -> temporal.omes.kitchen_sink.ContinueAsNewAction
	16,  // 37: temporal.omes.kitchen_sink.Action.nested_action_set:type_name -> temporal.omes.kitchen_sink.ActionSet
	47,  // 38: temporal.omes.kitchen_sink.AwaitableChoice.wait_finish:type_name -> google.protobuf.Empty
	47,  // 39: temporal.omes.kitchen_sink.AwaitableChoice.abandon:type_name -> google.protobuf.Empty
	47,  // 40: temporal.omes.kitchen_sink.AwaitableChoice.cancel_before_started:type_name -> google.protobuf.Empty
	47,  // 41: temporal.omes.kitchen_sink.AwaitableChoice.cancel_after_started:type_name -> google.protobuf.Empty
	47,  // 42: temporal.omes.kitchen_sink.AwaitableChoice.cancel_after_completed:type_name -> google.protobuf.Empty
	18,  // 43: temporal.omes.kitchen_sink.TimerAction.awaitable_choice:type_name -> temporal.omes.kitchen_sink.AwaitableChoice
	34,  // 44: temporal.omes.kitchen_sink.ExecuteActivityAction.generic:type_name -> temporal.omes.kitchen_sink.ExecuteActivityAction.GenericActivity
	45,  // 45: temporal.omes.kitchen_sink.ExecuteActivityAction.delay:type_name -> google.protobuf.Duration
	47,  // 46: temporal.omes.kitchen_sink.ExecuteActivityAction.noop:type_name -> google.protobuf.Empty
	35,  // 47: temporal.omes.kitchen_sink.ExecuteActivityAction.resources:type_name -> temporal.omes.kitchen_sink.ExecuteActivityAction.ResourcesActivity
	36,  // 48: temporal.omes.kitchen_sink.ExecuteActivityAction.headers:type_name -> temporal.omes.kitchen_sink.ExecuteActivityAction.HeadersEntry
	45,  // 49: temporal.omes.kitchen_sink.ExecuteActivityAction.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	45,  // 50: temporal.omes.kitchen_sink.ExecuteActivityAction.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	45,  // 51: temporal.omes.kitchen_sink.ExecuteActivityAction.start_to_close_timeout:type_name -> google.protobuf.Duration
	45,  // 52: temporal.omes.kitchen_sink.ExecuteActivityAction.heartbeat_timeout:type_name -> google.protobuf.Duration
	49,  // 53: temporal.omes.kitchen_sink.ExecuteActivityAction.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	47,  // 54: temporal.omes.kitchen_sink.ExecuteActivityAction.is_local:type_name -> google.protobuf.Empty
	31,  // 55: temporal.omes.kitchen_sink.ExecuteActivityAction.remote:type_name -> temporal.omes.kitchen_sink.RemoteActivityOptions
	18,  // 56: temporal.omes.kitchen_sink.ExecuteActivityAction.awaitable_choice:type_name -> temporal.omes.kitchen_sink.AwaitableChoice
	48,  // 57: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.input:type_name -> temporal.api.common.v1.Payload
	45,  // 58: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.workflow_execution_timeout:type_name -> google.protobuf.Duration
	45,  // 59: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.workflow_run_timeout:type_name -> google.protobuf.Duration
	45,  // 60: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.workflow_task_timeout:type_name -> google.protobuf.Duration
	0,   // 61: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.parent_close_policy:type_name -> temporal.omes.kitchen_sink.ParentClosePolicy
	50,  // 62: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.workflow_id_reuse_policy:type_name -> temporal.api.enums.v1.WorkflowIdReusePolicy
	49,  // 63: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	37,  // 64: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.headers:type_name -> temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.HeadersEntry
	38,  // 65: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.memo:type_name -> temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.MemoEntry
	39,  // 66: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.search_attributes:type_name -> temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.SearchAttributesEntry
	2,   // 67: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.cancellation_type:type_name -> temporal.omes.kitchen_sink.ChildWorkflowCancellationType
	1,   // 68: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.versioning_intent:type_name -> temporal.omes.kitchen_sink.VersioningIntent
	18,  // 69: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.awaitable_choice:type_name -> temporal.omes.kitchen_sink.AwaitableChoice
	48,  // 70: temporal.omes.kitchen_sink.SendSignalAction.args:type_name -> temporal.api.common.v1.Payload
	40,  // 71: temporal.omes.kitchen_sink.SendSignalAction.headers:type_name -> temporal.omes.kitchen_sink.SendSignalAction.HeadersEntry
	18,  // 72: temporal.omes.kitchen_sink.SendSignalAction.awaitable_choice:type_name -> temporal.omes.kitchen_sink.AwaitableChoice
	17,  // 73: temporal.omes.kitchen_sink.SetPatchMarkerAction.inner_action:type_name -> temporal.omes.kitchen_sink.Action
	41,  // 74: temporal.omes.kitchen_sink.UpsertSearchAttributesAction.search_attributes:type_name -> temporal.omes.kitchen_sink.UpsertSearchAttributesAction.SearchAttributesEntry
	51,  // 75: temporal.omes.kitchen_sink.UpsertMemoAction.upserted_memo:type_name -> temporal.api.common.v1.Memo
	48,  // 76: temporal.omes.kitchen_sink.ReturnResultAction.return_this:type_name -> temporal.api.common.v1.Payload
	52,  // 77: temporal.omes.kitchen_sink.ReturnErrorAction.failure:type_name -> temporal.api.failure.v1.Failure
	48,  // 78: temporal.omes.kitchen_sink.ContinueAsNewAction.arguments:type_name -> temporal.api.common.v1.Payload
	45,  // 79: temporal.omes.kitchen_sink.ContinueAsNewAction.workflow_run_timeout:type_name -> google.protobuf.Duration
	45,  // 80: temporal.omes.kitchen_sink.ContinueAsNewAction.workflow_task_timeout:type_name -> google.protobuf.Duration
	42,  // 81: temporal.omes.kitchen_sink.ContinueAsNewAction.memo:type_name -> temporal.omes.kitchen_sink.ContinueAsNewAction.MemoEntry
	43,  // 82: temporal.omes.kitchen_sink.ContinueAsNewAction.headers:type_name -> temporal.omes.kitchen_sink.ContinueAsNewAction.HeadersEntry
	44,  // 83: temporal.omes.kitchen_sink.ContinueAsNewAction.search_attributes:type_name -> temporal.omes.kitchen_sink.ContinueAsNewAction.SearchAttributesEntry
	49,  // 84: temporal.omes.kitchen_sink.ContinueAsNewAction.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	1,   // 85: temporal.omes.kitchen_sink.ContinueAsNewAction.versioning_intent:type_name -> temporal.omes.kitchen_sink.VersioningIntent
	3,   // 86: temporal.omes.kitchen_sink.RemoteActivityOptions.cancellation_type:type_name -> temporal.omes.kitchen_sink.ActivityCancellationType
	1,   // 87: temporal.omes.kitchen_sink.RemoteActivityOptions.versioning_intent:type_name -> temporal.omes.kitchen_sink.VersioningIntent
	16,  // 88: temporal.omes.kitchen_sink.DoSignal.DoSignalActions.do_actions:type_name -> temporal.omes.kitchen_sink.ActionSet
	16,  // 89: temporal.omes.kitchen_sink.DoSignal.DoSignalActions.do_actions_in_main:type_name -> temporal.omes.kitchen_sink.ActionSet
	48,  // 90: temporal.omes.kitchen_sink.ExecuteActivityAction.GenericActivity.arguments:type_name -> temporal.api.common.v1.Payload
	45,  // 91: temporal.omes.kitchen_sink.ExecuteActivityAction.ResourcesActivity.run_for:type_name -> google.protobuf.Duration
	48,  // 92: temporal.omes.kitchen_sink.ExecuteActivityAction.HeadersEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 93: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.HeadersEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 94: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.MemoEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 95: temporal.omes.kitchen_sink.ExecuteChildWorkflowAction.SearchAttributesEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 96: temporal.omes.kitchen_sink.SendSignalAction.HeadersEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 97: temporal.omes.kitchen_sink.UpsertSearchAttributesAction.SearchAttributesEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 98: temporal.omes.kitchen_sink.ContinueAsNewAction.MemoEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 99: temporal.omes.kitchen_sink.ContinueAsNewAction.HeadersEntry.value:type_name -> temporal.api.common.v1.Payload
	48,  // 100: temporal.omes.kitchen_sink.ContinueAsNewAction.SearchAttributesEntry.value:type_name -> temporal.api.common.v1.Payload
	101, // [101:101] is the sub-list for method output_type
	101, // [101:101] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_kitchen_sink_proto_init() }
func file_kitchen_sink_proto_init() {
	if File_kitchen_sink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kitchen_sink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientActionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithStartClientAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoActionsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerInvocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwaitableChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteActivityAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteChildWorkflowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwaitWorkflowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSignalAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPatchMarkerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSearchAttributesAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMemoAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnResultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnErrorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteActivityOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoSignal_DoSignalActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteActivityAction_GenericActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kitchen_sink_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteActivityAction_ResourcesActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kitchen_sink_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*WithStartClientAction_DoSignal)(nil),
		(*WithStartClientAction_DoUpdate)(nil),
	}
	file_kitchen_sink_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ClientAction_DoSignal)(nil),
		(*ClientAction_DoQuery)(nil),
		(*ClientAction_DoUpdate)(nil),
		(*ClientAction_NestedActions)(nil),
	}
	file_kitchen_sink_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DoSignal_DoSignalActions_)(nil),
		(*DoSignal_Custom)(nil),
	}
	file_kitchen_sink_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DoQuery_ReportState)(nil),
		(*DoQuery_Custom)(nil),
	}
	file_kitchen_sink_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DoUpdate_DoActions)(nil),
		(*DoUpdate_Custom)(nil),
	}
	file_kitchen_sink_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DoActionsUpdate_DoActions)(nil),
		(*DoActionsUpdate_RejectMe)(nil),
	}
	file_kitchen_sink_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Action_Timer)(nil),
		(*Action_ExecActivity)(nil),
		(*Action_ExecChildWorkflow)(nil),
		(*Action_AwaitWorkflowState)(nil),
		(*Action_SendSignal)(nil),
		(*Action_CancelWorkflow)(nil),
		(*Action_SetPatchMarker)(nil),
		(*Action_UpsertSearchAttributes)(nil),
		(*Action_UpsertMemo)(nil),
		(*Action_SetWorkflowState)(nil),
		(*Action_ReturnResult)(nil),
		(*Action_ReturnError)(nil),
		(*Action_ContinueAsNew)(nil),
		(*Action_NestedActionSet)(nil),
	}
	file_kitchen_sink_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AwaitableChoice_WaitFinish)(nil),
		(*AwaitableChoice_Abandon)(nil),
		(*AwaitableChoice_CancelBeforeStarted)(nil),
		(*AwaitableChoice_CancelAfterStarted)(nil),
		(*AwaitableChoice_CancelAfterCompleted)(nil),
	}
	file_kitchen_sink_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ExecuteActivityAction_Generic)(nil),
		(*ExecuteActivityAction_Delay)(nil),
		(*ExecuteActivityAction_Noop)(nil),
		(*ExecuteActivityAction_Resources)(nil),
		(*ExecuteActivityAction_IsLocal)(nil),
		(*ExecuteActivityAction_Remote)(nil),
	}
	file_kitchen_sink_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*DoSignal_DoSignalActions_DoActions)(nil),
		(*DoSignal_DoSignalActions_DoActionsInMain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kitchen_sink_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kitchen_sink_proto_goTypes,
		DependencyIndexes: file_kitchen_sink_proto_depIdxs,
		EnumInfos:         file_kitchen_sink_proto_enumTypes,
		MessageInfos:      file_kitchen_sink_proto_msgTypes,
	}.Build()
	File_kitchen_sink_proto = out.File
	file_kitchen_sink_proto_rawDesc = nil
	file_kitchen_sink_proto_goTypes = nil
	file_kitchen_sink_proto_depIdxs = nil
}
